
type TransactionRequest = record {
    to: text;
    value: nat64;
};

type TransactionResult = record {
    hash: text;
    status: text;
};

type PublicKeyReply = record { public_key : blob };
type Result = variant { Ok : PublicKeyReply; Err : text };
type Result_1 = variant { Ok : SignatureReply; Err : text };
type SignatureReply = record { signature : blob };

service : {
    "execute_transaction": (TransactionRequest) -> (TransactionResult);
    "get_transactions": (text) -> (vec TransactionResult) query;
    "get_public_key" : () -> (Result);
    "pubkey_bytes_to_address" : () -> (text);
    "get_balance": () -> (u128);
    "get_address": (text) -> (text) query;
}
